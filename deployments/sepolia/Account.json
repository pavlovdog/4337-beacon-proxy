{
  "address": "0x6Dccd7538feE888CA58c5e0561fE9ec60F9CF48C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_accountVersion",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_entryPoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "func",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "dest",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "value",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "func",
          "type": "bytes[]"
        }
      ],
      "name": "executeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbcba7916f6393538b7edb6774de7e19672f272905dd6ddb404606c7e98131bb8",
  "receipt": {
    "to": null,
    "from": "0x7879B4228c8Ea6e10718d0c66a1261215E1903A7",
    "contractAddress": "0x6Dccd7538feE888CA58c5e0561fE9ec60F9CF48C",
    "transactionIndex": 191,
    "gasUsed": "882234",
    "logsBloom": "0x
    "blockHash": "0xa2cea4095a5f3a7548d17fa0e7ced45b2e29ceca7dec68a7edf2c9753142ea01",
    "transactionHash": "0xbcba7916f6393538b7edb6774de7e19672f272905dd6ddb404606c7e98131bb8",
    "logs": [
      {
        "transactionIndex": 191,
        "blockNumber": 5234098,
        "transactionHash": "0xbcba7916f6393538b7edb6774de7e19672f272905dd6ddb404606c7e98131bb8",
        "address": "0x6Dccd7538feE888CA58c5e0561fE9ec60F9CF48C",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 333,
        "blockHash": "0xa2cea4095a5f3a7548d17fa0e7ced45b2e29ceca7dec68a7edf2c9753142ea01"
      }
    ],
    "blockNumber": 5234098,
    "cumulativeGasUsed": "18621174",
    "status": 1,
    "byzantium": true
  },
  "args": [
    0,
    "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
  ],
  "numDeployments": 1,
  "solcInputHash": "f49b66f6aae71e4d8dbb9134853a76cf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_accountVersion\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"func\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dest\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"func\",\"type\":\"bytes[]\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"execute(address,uint256,bytes)\":{\"params\":{\"dest\":\"destination address to call\",\"func\":\"the calldata to pass in this call\",\"value\":\"the value to pass in this call\"}},\"executeBatch(address[],uint256[],bytes[])\":{\"details\":\"to reduce gas consumption for trivial case (no value), use a zero-length array to mean zero value\",\"params\":{\"dest\":\"an array of destination addresses\",\"func\":\"an array of calldata to pass to each call\",\"value\":\"an array of values to pass to each call. can be zero-length for no-value calls\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute(address,uint256,bytes)\":{\"notice\":\"Execute a transaction (called directly from owner, or by entryPoint)\"},\"executeBatch(address[],uint256[],bytes[])\":{\"notice\":\"Execute a sequence of transactions\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sample/Account.sol\":\"Account\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"contracts/interfaces/sample/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.21;\\n\\n\\nimport {\\n  IVersion\\n} from \\\"./../utils/IVersion.sol\\\";\\n\\ninterface IAccount is IVersion {\\n  error InvalidSender();\\n}\",\"keccak256\":\"0xb663e6e30b17ad3218599854074aeb32efde88e5e74b01ecf23f02f585582671\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/utils/IVersion.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.21;\\n\\n\\ninterface IVersion {\\n  function version() external view returns (uint8);\\n}\",\"keccak256\":\"0x32a907d12b7be3407de13818c525090f8c3b0079f24f3ad2f54ecc7f2d997e7b\",\"license\":\"GPL-3.0\"},\"contracts/sample/Account.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.21;\\n\\n\\nimport {\\n  IAccount\\n} from \\\"./../interfaces/sample/IAccount.sol\\\";\\n\\nimport {\\n  Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {\\n  ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {\\n  OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n\\ncontract Account is \\n  Initializable,\\n  ReentrancyGuardUpgradeable,\\n  OwnableUpgradeable,\\n  IAccount\\n{\\n  uint8 private immutable accountVersion;\\n  address public immutable entryPoint; \\n\\n  modifier onlyOwnerOrEntryPoint() {\\n    if (msg.sender != entryPoint && msg.sender != owner()) {\\n      revert InvalidSender();\\n    }\\n\\n    _;\\n  }\\n\\n  constructor(\\n    uint8 _accountVersion,\\n    address _entryPoint\\n  ) {\\n    accountVersion = _accountVersion;\\n    entryPoint = _entryPoint;\\n\\n    _disableInitializers();    \\n  }\\n\\n  function version() external override view returns (uint8) {\\n    return accountVersion;\\n  }\\n\\n  function _call(address target, uint256 value, bytes memory data) internal {\\n    (bool success, bytes memory result) = target.call{value: value}(data);\\n    if (!success) {\\n      assembly {\\n        revert(add(result, 32), mload(result))\\n      }\\n    }\\n  }\\n\\n  /**\\n    * Execute a transaction (called directly from owner, or by entryPoint)\\n    * @param dest destination address to call\\n    * @param value the value to pass in this call\\n    * @param func the calldata to pass in this call\\n    */\\n  function execute(\\n    address dest,\\n    uint256 value,\\n    bytes calldata func\\n  ) external onlyOwnerOrEntryPoint {\\n    // _requireFromEntryPointOrOwner();\\n    _call(dest, value, func);\\n  }\\n\\n  /**\\n    * Execute a sequence of transactions\\n    * @dev to reduce gas consumption for trivial case (no value), use a zero-length array to mean zero value\\n    * @param dest an array of destination addresses\\n    * @param value an array of values to pass to each call. can be zero-length for no-value calls\\n    * @param func an array of calldata to pass to each call\\n    */\\n  function executeBatch(\\n    address[] calldata dest,\\n    uint256[] calldata value,\\n    bytes[] calldata func\\n  ) external onlyOwnerOrEntryPoint {\\n      require(dest.length == func.length && (value.length == 0 || value.length == func.length), \\\"wrong array lengths\\\");\\n\\n      if (value.length == 0) {\\n        for (uint256 i = 0; i < dest.length; i++) {\\n          _call(dest[i], 0, func[i]);\\n        }\\n      } else {\\n        for (uint256 i = 0; i < dest.length; i++) {\\n          _call(dest[i], value[i], func[i]);\\n        }\\n      }\\n  }\\n}\",\"keccak256\":\"0xb3ecb6be5c353e0fe60aecd631033690614129c2a1bd37664055df9c29c55d6c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620011913803806200119183398181016040528101906200003791906200026b565b8160ff1660808160ff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050620000896200009160201b60201c565b5050620002f4565b6000620000a36200019b60201b60201c565b90508060000160089054906101000a900460ff1615620000ef576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1614620001985767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff6040516200018f9190620002d7565b60405180910390a15b50565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600080fd5b600060ff82169050919050565b620001e081620001c8565b8114620001ec57600080fd5b50565b6000815190506200020081620001d5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002338262000206565b9050919050565b620002458162000226565b81146200025157600080fd5b50565b60008151905062000265816200023a565b92915050565b60008060408385031215620002855762000284620001c3565b5b60006200029585828601620001ef565b9250506020620002a88582860162000254565b9150509250929050565b600067ffffffffffffffff82169050919050565b620002d181620002b2565b82525050565b6000602082019050620002ee6000830184620002c6565b92915050565b60805160a051610e69620003286000396000818161013c0152818161048601526104aa015260006104140152610e696000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100c6578063b0d691fe146100e4578063b61d27f614610102578063f2fde38b1461011e5761007d565b806347e1da2a1461008257806354fd4d501461009e578063715018a6146100bc575b600080fd5b61009c60048036038101906100979190610976565b61013a565b005b6100a6610410565b6040516100b39190610a46565b60405180910390f35b6100c4610438565b005b6100ce61044c565b6040516100db9190610aa2565b60405180910390f35b6100ec610484565b6040516100f99190610aa2565b60405180910390f35b61011c60048036038101906101179190610b75565b6104a8565b005b61013860048036038101906101339190610be9565b6105c3565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156101c9575061019961044c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610200576040517fddb5de5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81819050868690501480156102285750600084849050148061022757508181905084849050145b5b610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610c73565b60405180910390fd5b600084849050036103335760005b8686905081101561032d5761031a87878381811061029657610295610c93565b5b90506020020160208101906102ab9190610be9565b60008585858181106102c0576102bf610c93565b5b90506020028101906102d29190610cd1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610649565b808061032590610d63565b915050610275565b50610408565b60005b86869050811015610406576103f387878381811061035757610356610c93565b5b905060200201602081019061036c9190610be9565b86868481811061037f5761037e610c93565b5b9050602002013585858581811061039957610398610c93565b5b90506020028101906103ab9190610cd1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610649565b80806103fe90610d63565b915050610336565b505b505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6104406106cd565b61044a6000610754565b565b60008061045761082b565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610537575061050761044c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561056e576040517fddb5de5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105bd848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610649565b50505050565b6105cb6106cd565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361063d5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016106349190610aa2565b60405180910390fd5b61064681610754565b50565b6000808473ffffffffffffffffffffffffffffffffffffffff1684846040516106729190610e1c565b60006040518083038185875af1925050503d80600081146106af576040519150601f19603f3d011682016040523d82523d6000602084013e6106b4565b606091505b5091509150816106c657805160208201fd5b5050505050565b6106d5610853565b73ffffffffffffffffffffffffffffffffffffffff166106f361044c565b73ffffffffffffffffffffffffffffffffffffffff161461075257610716610853565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016107499190610aa2565b60405180910390fd5b565b600061075e61082b565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600033905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261088a57610889610865565b5b8235905067ffffffffffffffff8111156108a7576108a661086a565b5b6020830191508360208202830111156108c3576108c261086f565b5b9250929050565b60008083601f8401126108e0576108df610865565b5b8235905067ffffffffffffffff8111156108fd576108fc61086a565b5b6020830191508360208202830111156109195761091861086f565b5b9250929050565b60008083601f84011261093657610935610865565b5b8235905067ffffffffffffffff8111156109535761095261086a565b5b60208301915083602082028301111561096f5761096e61086f565b5b9250929050565b600080600080600080606087890312156109935761099261085b565b5b600087013567ffffffffffffffff8111156109b1576109b0610860565b5b6109bd89828a01610874565b9650965050602087013567ffffffffffffffff8111156109e0576109df610860565b5b6109ec89828a016108ca565b9450945050604087013567ffffffffffffffff811115610a0f57610a0e610860565b5b610a1b89828a01610920565b92509250509295509295509295565b600060ff82169050919050565b610a4081610a2a565b82525050565b6000602082019050610a5b6000830184610a37565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8c82610a61565b9050919050565b610a9c81610a81565b82525050565b6000602082019050610ab76000830184610a93565b92915050565b610ac681610a81565b8114610ad157600080fd5b50565b600081359050610ae381610abd565b92915050565b6000819050919050565b610afc81610ae9565b8114610b0757600080fd5b50565b600081359050610b1981610af3565b92915050565b60008083601f840112610b3557610b34610865565b5b8235905067ffffffffffffffff811115610b5257610b5161086a565b5b602083019150836001820283011115610b6e57610b6d61086f565b5b9250929050565b60008060008060608587031215610b8f57610b8e61085b565b5b6000610b9d87828801610ad4565b9450506020610bae87828801610b0a565b935050604085013567ffffffffffffffff811115610bcf57610bce610860565b5b610bdb87828801610b1f565b925092505092959194509250565b600060208284031215610bff57610bfe61085b565b5b6000610c0d84828501610ad4565b91505092915050565b600082825260208201905092915050565b7f77726f6e67206172726179206c656e6774687300000000000000000000000000600082015250565b6000610c5d601383610c16565b9150610c6882610c27565b602082019050919050565b60006020820190508181036000830152610c8c81610c50565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610cee57610ced610cc2565b5b80840192508235915067ffffffffffffffff821115610d1057610d0f610cc7565b5b602083019250600182023603831315610d2c57610d2b610ccc565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6e82610ae9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610da057610d9f610d34565b5b600182019050919050565b600081519050919050565b600081905092915050565b60005b83811015610ddf578082015181840152602081019050610dc4565b60008484015250505050565b6000610df682610dab565b610e008185610db6565b9350610e10818560208601610dc1565b80840191505092915050565b6000610e288284610deb565b91508190509291505056fea2646970667358221220b5996c8af77054b619f1a25d48f5d2c1ca27cfd935159ad4314fedd4dbce70f364736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100c6578063b0d691fe146100e4578063b61d27f614610102578063f2fde38b1461011e5761007d565b806347e1da2a1461008257806354fd4d501461009e578063715018a6146100bc575b600080fd5b61009c60048036038101906100979190610976565b61013a565b005b6100a6610410565b6040516100b39190610a46565b60405180910390f35b6100c4610438565b005b6100ce61044c565b6040516100db9190610aa2565b60405180910390f35b6100ec610484565b6040516100f99190610aa2565b60405180910390f35b61011c60048036038101906101179190610b75565b6104a8565b005b61013860048036038101906101339190610be9565b6105c3565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156101c9575061019961044c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610200576040517fddb5de5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81819050868690501480156102285750600084849050148061022757508181905084849050145b5b610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610c73565b60405180910390fd5b600084849050036103335760005b8686905081101561032d5761031a87878381811061029657610295610c93565b5b90506020020160208101906102ab9190610be9565b60008585858181106102c0576102bf610c93565b5b90506020028101906102d29190610cd1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610649565b808061032590610d63565b915050610275565b50610408565b60005b86869050811015610406576103f387878381811061035757610356610c93565b5b905060200201602081019061036c9190610be9565b86868481811061037f5761037e610c93565b5b9050602002013585858581811061039957610398610c93565b5b90506020028101906103ab9190610cd1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610649565b80806103fe90610d63565b915050610336565b505b505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6104406106cd565b61044a6000610754565b565b60008061045761082b565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610537575061050761044c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561056e576040517fddb5de5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105bd848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610649565b50505050565b6105cb6106cd565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361063d5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016106349190610aa2565b60405180910390fd5b61064681610754565b50565b6000808473ffffffffffffffffffffffffffffffffffffffff1684846040516106729190610e1c565b60006040518083038185875af1925050503d80600081146106af576040519150601f19603f3d011682016040523d82523d6000602084013e6106b4565b606091505b5091509150816106c657805160208201fd5b5050505050565b6106d5610853565b73ffffffffffffffffffffffffffffffffffffffff166106f361044c565b73ffffffffffffffffffffffffffffffffffffffff161461075257610716610853565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016107499190610aa2565b60405180910390fd5b565b600061075e61082b565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600033905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261088a57610889610865565b5b8235905067ffffffffffffffff8111156108a7576108a661086a565b5b6020830191508360208202830111156108c3576108c261086f565b5b9250929050565b60008083601f8401126108e0576108df610865565b5b8235905067ffffffffffffffff8111156108fd576108fc61086a565b5b6020830191508360208202830111156109195761091861086f565b5b9250929050565b60008083601f84011261093657610935610865565b5b8235905067ffffffffffffffff8111156109535761095261086a565b5b60208301915083602082028301111561096f5761096e61086f565b5b9250929050565b600080600080600080606087890312156109935761099261085b565b5b600087013567ffffffffffffffff8111156109b1576109b0610860565b5b6109bd89828a01610874565b9650965050602087013567ffffffffffffffff8111156109e0576109df610860565b5b6109ec89828a016108ca565b9450945050604087013567ffffffffffffffff811115610a0f57610a0e610860565b5b610a1b89828a01610920565b92509250509295509295509295565b600060ff82169050919050565b610a4081610a2a565b82525050565b6000602082019050610a5b6000830184610a37565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8c82610a61565b9050919050565b610a9c81610a81565b82525050565b6000602082019050610ab76000830184610a93565b92915050565b610ac681610a81565b8114610ad157600080fd5b50565b600081359050610ae381610abd565b92915050565b6000819050919050565b610afc81610ae9565b8114610b0757600080fd5b50565b600081359050610b1981610af3565b92915050565b60008083601f840112610b3557610b34610865565b5b8235905067ffffffffffffffff811115610b5257610b5161086a565b5b602083019150836001820283011115610b6e57610b6d61086f565b5b9250929050565b60008060008060608587031215610b8f57610b8e61085b565b5b6000610b9d87828801610ad4565b9450506020610bae87828801610b0a565b935050604085013567ffffffffffffffff811115610bcf57610bce610860565b5b610bdb87828801610b1f565b925092505092959194509250565b600060208284031215610bff57610bfe61085b565b5b6000610c0d84828501610ad4565b91505092915050565b600082825260208201905092915050565b7f77726f6e67206172726179206c656e6774687300000000000000000000000000600082015250565b6000610c5d601383610c16565b9150610c6882610c27565b602082019050919050565b60006020820190508181036000830152610c8c81610c50565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610cee57610ced610cc2565b5b80840192508235915067ffffffffffffffff821115610d1057610d0f610cc7565b5b602083019250600182023603831315610d2c57610d2b610ccc565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6e82610ae9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610da057610d9f610d34565b5b600182019050919050565b600081519050919050565b600081905092915050565b60005b83811015610ddf578082015181840152602081019050610dc4565b60008484015250505050565b6000610df682610dab565b610e008185610db6565b9350610e10818560208601610dc1565b80840191505092915050565b6000610e288284610deb565b91508190509291505056fea2646970667358221220b5996c8af77054b619f1a25d48f5d2c1ca27cfd935159ad4314fedd4dbce70f364736f6c63430008150033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "execute(address,uint256,bytes)": {
        "params": {
          "dest": "destination address to call",
          "func": "the calldata to pass in this call",
          "value": "the value to pass in this call"
        }
      },
      "executeBatch(address[],uint256[],bytes[])": {
        "details": "to reduce gas consumption for trivial case (no value), use a zero-length array to mean zero value",
        "params": {
          "dest": "an array of destination addresses",
          "func": "an array of calldata to pass to each call",
          "value": "an array of values to pass to each call. can be zero-length for no-value calls"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "execute(address,uint256,bytes)": {
        "notice": "Execute a transaction (called directly from owner, or by entryPoint)"
      },
      "executeBatch(address[],uint256[],bytes[])": {
        "notice": "Execute a sequence of transactions"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}